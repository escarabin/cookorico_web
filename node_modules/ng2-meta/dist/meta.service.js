"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var platform_browser_1 = require('@angular/platform-browser');
var platform_browser_2 = require('@angular/platform-browser');
var router_1 = require('@angular/router');
require('rxjs/add/operator/filter');
var isDefined = function (val) { return typeof val !== 'undefined'; };
var MetaConfig = (function () {
    function MetaConfig(config) {
        this.useTitleSuffix = false;
        this.defaults = {};
        if (config) {
            this.useTitleSuffix = isDefined(config.useTitleSuffix) ? config.useTitleSuffix : false;
            this.defaults = config.defaults || {};
        }
    }
    return MetaConfig;
}());
exports.MetaConfig = MetaConfig;
var MetaService = (function () {
    function MetaService(titleService, document, router, activatedRoute, metaConfig) {
        var _this = this;
        if (metaConfig === void 0) { metaConfig = new MetaConfig(); }
        this.titleService = titleService;
        this.document = document;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.metaConfig = metaConfig;
        this.metaConfig = metaConfig || new MetaConfig();
        this.headElement = this.document.querySelector('head');
        // Credit: https://github.com/angular/angular/issues/9662#issuecomment-229058750
        this.sub = this.router.events
            .filter(function (event) { return (event instanceof router_1.NavigationEnd); })
            .map(function (_) { return _this.router.routerState; })
            .map(function (state) {
            var route = _this.activatedRoute;
            while (state.firstChild(route)) {
                route = state.firstChild(route);
            }
            return route;
        })
            .filter(function (route) { return route.outlet === router_1.PRIMARY_OUTLET; })
            .flatMap(function (route) { return route.data; })
            .subscribe(function (data) {
            _this._updateMetaTags(data.meta);
        });
    }
    MetaService.prototype._getOrCreateMetaTag = function (name) {
        var el = this.document.querySelector('meta[name=\'' + name + '\']');
        if (!el) {
            el = this.document.createElement('meta');
            el.setAttribute('name', name);
            this.headElement.appendChild(el);
        }
        return el;
    };
    MetaService.prototype._updateMetaTags = function (meta) {
        var _this = this;
        if (meta === void 0) { meta = {}; }
        if (meta.disableUpdate) {
            return false;
        }
        this.setTitle(meta.title, meta.titleSuffix);
        Object.keys(meta).forEach(function (key) {
            if (key === 'title' || key === 'titleSuffix') {
                return;
            }
            _this.setTag(key, meta[key]);
        });
        Object.keys(this.metaConfig.defaults).forEach(function (key) {
            if (key in meta || key === 'title' || key === 'titleSuffix') {
                return;
            }
            _this.setTag(key, _this.metaConfig.defaults[key]);
        });
    };
    MetaService.prototype.setTitle = function (title, titleSuffix) {
        var titleElement = this._getOrCreateMetaTag('title');
        var ogTitleElement = this._getOrCreateMetaTag('og:title');
        var titleStr = isDefined(title) ? title : (this.metaConfig.defaults.title || '');
        if (this.metaConfig.useTitleSuffix) {
            titleStr += isDefined(titleSuffix) ? titleSuffix : (this.metaConfig.defaults.titleSuffix || '');
        }
        titleElement.setAttribute('content', titleStr);
        ogTitleElement.setAttribute('content', titleStr);
        this.titleService.setTitle(titleStr);
    };
    MetaService.prototype.setTag = function (tag, value) {
        if (tag === 'title' || tag === 'titleSuffix') {
            throw new Error("Attempt to set " + tag + " through 'setTag': 'title' and 'titleSuffix' are reserved tag names. Please use 'MetaService.setTitle' instead");
        }
        var tagElement = this._getOrCreateMetaTag(tag);
        var tagStr = isDefined(value) ? value : (this.metaConfig.defaults[tag] || '');
        tagElement.setAttribute('content', tagStr);
        if (tag === 'description') {
            var ogDescElement = this._getOrCreateMetaTag('og:description');
            ogDescElement.setAttribute('content', tagStr);
        }
    };
    MetaService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Inject(platform_browser_2.DOCUMENT)),
        __param(4, core_1.Inject('meta.config')),
        __param(4, core_1.Optional()), 
        __metadata('design:paramtypes', [platform_browser_1.Title, Object, router_1.Router, router_1.ActivatedRoute, MetaConfig])
    ], MetaService);
    return MetaService;
}());
exports.MetaService = MetaService;
//# sourceMappingURL=meta.service.js.map